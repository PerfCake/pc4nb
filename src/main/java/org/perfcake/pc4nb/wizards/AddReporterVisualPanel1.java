/*
 * Copyright 2015 Andrej Halaj.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.perfcake.pc4nb.wizards;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.perfcake.pc4nb.reflect.ComponentPropertiesScanner;
import org.perfcake.pc4nb.reflect.ComponentScanner;
import org.perfcake.reporting.reporters.Reporter;

public final class AddReporterVisualPanel1 extends JPanel {

    public AddReporterVisualPanel1() {
        initComponents();
        try {
            listProperties();
        } catch (ClassNotFoundException | NoSuchFieldException ex) {
            System.err.println("Class not found " + ex.getMessage());
        }
    }

    @Override
    public String getName() {
        return "Add Reporter";
    }

    public JComboBox getReporterSelection() {
        return reporterSelection;
    }

    public JScrollPane getjScrollPane1() {
        return propertiesListScrollPane;
    }

    public JLabel getPropertiesLabel() {
        return propertiesLabel;
    }

    public JList getPropertiesList() {
        return propertiesList;
    }

    public JScrollPane getPropertiesListScrollPane() {
        return propertiesListScrollPane;
    }

    public JLabel getReporterTypeLabel() {
        return reporterTypeLabel;
    }

    public void addProperty(String name, String value) {
        propertiesListModel.insertElementAt(name + " : " + value, propertiesListModel.getSize());
    }

    private void listProperties() throws ClassNotFoundException, NoSuchFieldException {
        String selectedReporterName = (String) reporterSelection.getSelectedItem();
        String selectedReporterFullName = "org.perfcake.reporting.reporters." + selectedReporterName;
        Class selectedReporterClass = Class.forName(selectedReporterFullName);
        
        ComponentPropertiesScanner propertyScanner = new ComponentPropertiesScanner();
        Set<String> properties = propertyScanner.getPropertiesOfComponent(selectedReporterClass);
        
        Class superClass = selectedReporterClass.getSuperclass();
        while (org.perfcake.reporting.reporters.Reporter.class.isAssignableFrom(superClass)) {
            properties.addAll(propertyScanner.getPropertiesOfComponent(superClass));
            superClass = superClass.getSuperclass();
        }
        
        /*Class[] interfaces = selectedReporterClass.getInterfaces();
        
        for (Class interfce : interfaces) {
            Class[] moreInterfaces;
            
            while(org.perfcake.reporting.reporters.Reporter.class.isAssignableFrom(interfce)) {
                properties.addAll(propertyScanner.getPropertiesOfComponent(interfce));
                moreInterfaces = interfce.getInterfaces();
            }
        }*/

        propertiesListModel.clear();
        
        for (String property : properties)
            propertiesListModel.addElement(property);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reporterSelection = new javax.swing.JComboBox();
        reporterTypeLabel = new javax.swing.JLabel();
        propertiesLabel = new javax.swing.JLabel();
        propertiesListScrollPane = new javax.swing.JScrollPane();
        propertiesList = new javax.swing.JList();
        destinationsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        destinationsList = new javax.swing.JList();
        addDestinationButton = new javax.swing.JButton();
        deleteDestinationButton = new javax.swing.JButton();
        editDestinationButton = new javax.swing.JButton();

        ComponentScanner scanner = new ComponentScanner();
        Set<Class<? extends Reporter>> subTypes = scanner.findComponentsOfType(Reporter.class, "org.perfcake.reporting.reporters");
        Set<String> reporterNames = new HashSet<>();

        for(Class<? extends Reporter> reporter : subTypes) {
            reporterNames.add(reporter.getSimpleName());
        }

        String[] reporterNamesArray = new String[reporterNames.size()];
        reporterNames.toArray(reporterNamesArray);
        reporterSelection.setModel(new DefaultComboBoxModel(reporterNamesArray));
        reporterSelection.setSelectedItem (reporterNamesArray[0]);

        reporterSelection.addItemListener (new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                try {
                    listProperties();
                } catch (ClassNotFoundException | NoSuchFieldException ex) {
                    // blah
                }
            }
        });
        reporterSelection.setName("reporterSelection"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(reporterTypeLabel, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.reporterTypeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(propertiesLabel, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.propertiesLabel.text")); // NOI18N

        propertiesListModel = new DefaultListModel();
        propertiesList.setModel(propertiesListModel);
        propertiesList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        propertiesList.setVisibleRowCount(30000);
        propertiesListScrollPane.setViewportView(propertiesList);

        org.openide.awt.Mnemonics.setLocalizedText(destinationsLabel, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.destinationsLabel.text")); // NOI18N

        destinationsListModel = new DefaultListModel();
        destinationsList.setModel(destinationsListModel);
        jScrollPane1.setViewportView(destinationsList);

        org.openide.awt.Mnemonics.setLocalizedText(addDestinationButton, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.addDestinationButton.text")); // NOI18N
        addDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDestinationButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteDestinationButton, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.deleteDestinationButton.text")); // NOI18N
        deleteDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDestinationButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(editDestinationButton, org.openide.util.NbBundle.getMessage(AddReporterVisualPanel1.class, "AddReporterVisualPanel1.editDestinationButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addDestinationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteDestinationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editDestinationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(destinationsLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(propertiesListScrollPane)
                        .addComponent(propertiesLabel)
                        .addComponent(reporterTypeLabel)
                        .addComponent(reporterSelection, 0, 368, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(reporterTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reporterSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(propertiesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertiesListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(destinationsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addDestinationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editDestinationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteDestinationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDestinationButtonActionPerformed
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        JFrame frame = new JFrame();
        frame.setLocationRelativeTo(null);
    }//GEN-LAST:event_addDestinationButtonActionPerformed

    private void deleteDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDestinationButtonActionPerformed
        if (destinationsList.getSelectedIndices().length > 0) {
            int[] elementsToRemove = destinationsList.getSelectedIndices();

            for (int i = elementsToRemove.length - 1; i >= 0; i--) {
                destinationsListModel.removeElementAt(elementsToRemove[i]);
            }
        }
    }//GEN-LAST:event_deleteDestinationButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDestinationButton;
    private javax.swing.JButton deleteDestinationButton;
    private javax.swing.JLabel destinationsLabel;
    private javax.swing.JList destinationsList;
    private javax.swing.DefaultListModel destinationsListModel;
    private javax.swing.JButton editDestinationButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel propertiesLabel;
    private javax.swing.JList propertiesList;
    private javax.swing.DefaultListModel propertiesListModel;
    private javax.swing.JScrollPane propertiesListScrollPane;
    private javax.swing.JComboBox reporterSelection;
    private javax.swing.JLabel reporterTypeLabel;
    // End of variables declaration//GEN-END:variables
}
