/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.perfcake.pc4nb.scenario;

import org.perfcake.pc4nb.ui3.AbstractPC4NBView;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.beans.PropertyChangeEvent;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileChangeAdapter;
import org.openide.filesystems.FileEvent;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.perfcake.model.Scenario;
import org.perfcake.model.Scenario.Reporting;
import org.perfcake.model.Scenario.Sender;
import org.perfcake.model.Scenario.Validation;
import org.perfcake.pc4nb.core.model.*;
import org.perfcake.pc4nb.ui.palette.PC4NBPaletteActions;
import org.perfcake.pc4nb.ui.palette.PerfCakeComponentCategoryNodeContainer;
import org.perfcake.pc4nb.ui3.ComponentCategory;
import static org.perfcake.pc4nb.ui3.ComponentCategory.*;
import org.perfcake.pc4nb.ui3.ScenarioLayoutManager;

@MultiViewElement.Registration(
        displayName = "#LBL_PCScenario_VISUAL",
        iconBase = "org/perfcake/pc4nb/favicon.png",
        mimeType = "text/pcscenario+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "PCScenarioVisual",
        position = 2000
)
@Messages("LBL_PCScenario_VISUAL=Designer")
public final class PCScenarioVisualElement extends AbstractPC4NBView implements MultiViewElement {

    private PCScenarioDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private MultiViewElementCallback callback;
    private PaletteController paletteController = null;
    JScrollPane scrollPane = new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    ScenarioLayoutManager scenarioLayout = new ScenarioLayoutManager();

    public PCScenarioVisualElement(Lookup lkp) throws IOException {
        obj = lkp.lookup(PCScenarioDataObject.class);
        assert obj != null;
        initComponents();

        this.setLayout(null);

        initPalette();

        this.add(scenarioLayout.getView(GENERATOR));
        this.add(scenarioLayout.getView(SENDER));
        this.add(scenarioLayout.getView(MESSAGES));
        this.add(scenarioLayout.getView(VALIDATION));
        this.add(scenarioLayout.getView(REPORTING));
        this.add(scenarioLayout.getView(ComponentCategory.PROPERTIES));
        scenarioLayout.getView(ComponentCategory.PROPERTIES).setColor(Color.ORANGE);

        refreshScenarioView();

        obj.getPrimaryFile().addFileChangeListener(new FileChangeAdapter() {
            @Override
            public void fileChanged(FileEvent fe) {
                refreshScenarioView();
            }
        });
    }

    @Override
    public String getName() {
        return "PCScenarioVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(32500, 3250));
        setName(""); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
        private void initPalette() {
        Node palette = new AbstractNode(new PerfCakeComponentCategoryNodeContainer());
        PaletteActions actions = new PC4NBPaletteActions();

        paletteController = PaletteFactory.createPalette(palette, actions);
    }

    public void refreshScenarioView() {
        try {
            URL scenarioUrl = obj.getPrimaryFile().toURL();

            ScenarioManager manager = new ScenarioManager();
            ScenarioModel scenarioModel = manager.createModel(scenarioUrl);
            Scenario scenario = scenarioModel.getScenario();
            this.setModel(scenarioModel);

            GeneratorModel generatorModel = (GeneratorModel) ModelMap.getDefault().getPC4NBModelFor(scenario.getGenerator());
            scenarioLayout.getView(GENERATOR).setModel(generatorModel);

            Sender sender = scenario.getSender();
            SenderModel senderModel = (SenderModel) ModelMap.getDefault().getPC4NBModelFor(sender);
            scenarioLayout.getView(SENDER).setModel(senderModel);

            Scenario.Messages messages = scenario.getMessages();
            MessagesModel messagesModel = (MessagesModel) ModelMap.getDefault().getPC4NBModelFor(messages);
            if (messagesModel == null) {
                messagesModel = new MessagesModel(null);
            }
            scenarioLayout.getView(MESSAGES).setModel(messagesModel);

            Reporting reporting = scenario.getReporting();
            ReportingModel reportingModel = (ReportingModel) ModelMap.getDefault().getPC4NBModelFor(reporting);
            if (reportingModel == null) {
                reportingModel = new ReportingModel(null);
            }
            scenarioLayout.getView(REPORTING).setModel(reportingModel);

            Validation validation = scenario.getValidation();
            ValidationModel validationModel = (ValidationModel) ModelMap.getDefault().getPC4NBModelFor(validation);
            if (validationModel == null) {
                validationModel = new ValidationModel(null);
            }
            scenarioLayout.getView(VALIDATION).setModel(validationModel);

            scenarioLayout.recomputeChildren();
            //getVisualRepresentation().addMouseListener((MouseListener) scenarioLayout.getView(REPORTING));

            this.revalidate();
            this.repaint();
        } catch (ScenarioException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public JComponent getVisualRepresentation() {
        return scrollPane;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return new ProxyLookup(obj.getLookup(), Lookups.fixed(paletteController));
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
        ScenarioManager manager = new ScenarioManager();

        URI scenarioPath = obj.getPrimaryFile().toURI();

        try {
            OutputStream os = new FileOutputStream(Utilities.toFile(scenarioPath));
            manager.createXML(((ScenarioModel) getModel()).getScenario(), os);
        } catch (ScenarioException | ScenarioManagerException ex) {
            // error
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public Dimension getMinimumSize() {
        return new Dimension(200, 100);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(1280, 800);
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        return;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        scenarioLayout.setWidth(scrollPane.getViewport().getWidth());
    }
}
