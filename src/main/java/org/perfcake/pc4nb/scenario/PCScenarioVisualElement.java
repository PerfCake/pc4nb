/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.perfcake.pc4nb.scenario;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.IOException;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import net.miginfocom.swing.MigLayout;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.perfcake.model.Scenario.*;
import org.perfcake.pc4nb.core.controller.*;
import org.perfcake.pc4nb.core.model.*;
import org.perfcake.pc4nb.ui.*;
import org.perfcake.pc4nb.ui.palette.PerfCakeComponentCategoryNodeContainer;

@MultiViewElement.Registration(
        displayName = "#LBL_PCScenario_VISUAL",
        iconBase = "org/perfcake/pc4nb/favicon.png",
        mimeType = "text/pcscenario+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "PCScenarioVisual",
        position = 2000
)
@Messages("LBL_PCScenario_VISUAL=Designer")
public final class PCScenarioVisualElement extends JPanel implements MultiViewElement {

    private PCScenarioDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private MultiViewElementCallback callback;
    private PaletteController paletteController = null;
    JScrollPane scrollPane = new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

    public PCScenarioVisualElement(Lookup lkp) throws IOException {
        obj = lkp.lookup(PCScenarioDataObject.class);
        assert obj != null;
        initComponents();

        initPalette();
        initUI();

    }

    @Override
    public String getName() {
        return "PCScenarioVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(32500, 3250));
        setName(""); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
        private void initPalette() {
        Node palette = new AbstractNode(new PerfCakeComponentCategoryNodeContainer());
        PaletteActions actions = new PaletteActions() {
            @Override
            public Action[] getImportActions() {
                return null;
            }

            @Override
            public Action[] getCustomPaletteActions() {
                return null;
            }

            @Override
            public Action[] getCustomCategoryActions(Lookup lkp) {
                return null;
            }

            @Override
            public Action[] getCustomItemActions(Lookup lkp) {
                return null;
            }

            @Override
            public Action getPreferredAction(Lookup lkp) {
                return null;
            }
        };
        paletteController = PaletteFactory.createPalette(palette, actions);
    }

    private void initUI() {
        JPanel contentPane = new JPanel();
        this.setLayout(new FlowLayout(FlowLayout.LEFT));
        
        MigLayout layout = new MigLayout("fillx", "[center]20[center]", "[center]20[center]20[center]");
        contentPane.setLayout(layout);
        contentPane.setBackground(Color.gray);
        /*contentPane.setPreferredSize(new Dimension(640, 480));
         contentPane.setMinimumSize(new Dimension(640, 480));*/

        
        Generator generator = new Generator();
        generator.setClazz("DefaultMessageGenerator");
        TopLevelView generatorView = new TopLevelView(generator.getClazz());
        GeneratorModel generatorModel = new GeneratorModel(generator);
        GeneratorController generatorController = new GeneratorController(generatorModel, generatorView);
        generatorView.setController(generatorController);
        
        Sender sender = new Sender();
        sender.setClazz("HttpSender");
        TopLevelView senderView = new TopLevelView(sender.getClazz());
        SenderModel senderModel = new SenderModel(sender);
        SenderController senderController = new SenderController(senderModel, senderView);
        senderView.setController(senderController);
        
        MessagesModel messagesModel = new MessagesModel(new org.perfcake.model.Scenario.Messages());
        TopLevelView messagesView = new TopLevelView("Messages");
        MessagesController messagesController = new MessagesController(messagesModel, messagesView);
        messagesView.setController(messagesController);
        
        ReportingModel reportingModel = new ReportingModel(new Reporting());
        TopLevelView reportingView = new TopLevelView("Reporting");
        ReportingController reportingController = new ReportingController(reportingModel, reportingView);
        reportingView.setController(reportingController);
        
        ValidationModel validationModel = new ValidationModel(new Validation());
        TopLevelView validationView = new TopLevelView("Validation");
        ValidationController validationController = new ValidationController(validationModel, validationView);
        validationView.setController(validationController);
        
        
        TopLevelView propertiesPanel = new TopLevelView("Properties");

        contentPane.add(generatorView, "span 2, wrap, growx 150");
        contentPane.add(senderView, " span 2, wrap, growx 150");
        contentPane.add(messagesView, "growx 150");
        contentPane.add(reportingView, "span 1 2, wrap, growy 200, growx 150");
        contentPane.add(validationView, "wrap, growx 150");
        contentPane.add(propertiesPanel, "span 2, growx 150");
        
        this.add(contentPane);
        scrollPane.setViewportView(contentPane);
    }

    @Override
    public JComponent getVisualRepresentation() {
        return scrollPane;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return new ProxyLookup(obj.getLookup(), Lookups.fixed(paletteController));
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public Dimension getMinimumSize() {
        return new Dimension(200, 100);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(1280, 800);
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
}
