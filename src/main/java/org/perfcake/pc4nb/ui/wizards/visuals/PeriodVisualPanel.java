/*
 * Copyright (c) 2015 Andrej Halaj
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.perfcake.pc4nb.ui.wizards.visuals;

import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import org.perfcake.common.PeriodType;
import org.perfcake.model.Scenario.Reporting.Reporter.Destination.Period;
import org.perfcake.pc4nb.model.PC4NBModel;
import org.perfcake.pc4nb.model.PeriodModel;
import org.perfcake.pc4nb.ui.AbstractPC4NBView;

public final class PeriodVisualPanel extends AbstractPC4NBView {

    /**
     * Creates new form PeriodVisualPanel1
     */
    public PeriodVisualPanel() {
        setModel(new PeriodModel(new Period()));
        initComponents();
    }

    @Override
    public String getName() {
        return "Period";
    }

    public JComboBox getPeriodSelection() {
        return periodSelection;
    }

    public JSpinner getPeriodValueSpinner() {
        return periodValueSpinner;
    }

    @Override
    public void setModel(PC4NBModel model) {
        super.setModel(model);

        PeriodModel periodModel = (PeriodModel) model;
        String periodType = periodModel.getPeriod().getType();
        String periodValue = periodModel.getPeriod().getValue();

        if (periodType != null) {
            periodSelection.setSelectedItem(periodType);
        }

        if (periodValue != null) {
            periodValueSpinner.setValue(Integer.parseInt(periodModel.getPeriod().getValue()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        periodTypeLabel = new javax.swing.JLabel();
        periodSelection = new javax.swing.JComboBox();
        valueLabel = new javax.swing.JLabel();
        periodValueSpinner = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(periodTypeLabel, org.openide.util.NbBundle.getMessage(PeriodVisualPanel.class, "PeriodVisualPanel.periodTypeLabel.text")); // NOI18N

        List<PeriodType> periodTypes = Arrays.asList(PeriodType.values());
        List<String> periodTypeNamesList = new ArrayList<>();

        for (PeriodType periodType : periodTypes) {
            periodTypeNamesList.add(periodType.name());
        }

        String[] periodTypeNames = new String[periodTypeNamesList.size()];
        periodTypeNamesList.toArray(periodTypeNames);
        periodSelection.setModel(new DefaultComboBoxModel(periodTypeNames));

        org.openide.awt.Mnemonics.setLocalizedText(valueLabel, org.openide.util.NbBundle.getMessage(PeriodVisualPanel.class, "PeriodVisualPanel.valueLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodTypeLabel)
                    .addComponent(periodSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(periodTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(periodSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(valueLabel)
                .addGap(18, 18, 18)
                .addComponent(periodValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(202, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox periodSelection;
    private javax.swing.JLabel periodTypeLabel;
    private javax.swing.JSpinner periodValueSpinner;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }
}
